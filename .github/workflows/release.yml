name: Release Python app

run-name: Release ${{ github.ref_name }}

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build app on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest", "macos-latest", "ubuntu-latest"]
    steps:
      - name: Checkout ref
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install pyinstaller

      - name: PyInstaller (Terminal GUI)
        run: pyinstaller --onefile --icon=images/icon.ico versions/terminal_gui.py --name translator_cmd_${{ matrix.os }}

      - name: List dist directory # debug
        run: ls -R dist
      
      - name: PyInstaller (CLI)
        run: pyinstaller --onefile --icon=images/icon.ico versions/cli_args.py --name translator_cli_${{ matrix.os }}

      - name: List dist directory
        run: ls -R dist

      - name: Tar files on Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
            chmod +x dist/${{ matrix.os }}_cmd-release
            chmod +x dist/${{ matrix.os }}_cli-release
            tar -czvf dist/translator@${{ github.ref_name }}_${{ matrix.os }}_cmd.tar.gz dist/${{ matrix.os }}_cmd-release
            tar -czvf dist/translator@${{ github.ref_name }}_${{ matrix.os }}_cli.tar.gz dist/${{ matrix.os }}_cli-release
            rm -rf dist/${{ matrix.os }}_cmd-release
            rm -rf dist/${{ matrix.os }}_cli-release
      
      - name: Zip folder on Mac
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          zip -r translator@${{ github.ref_name }}_${{ matrix.os }}.zip dist/
          rm -rf dist/
          mkdir dist/
          mv translator@${{ github.ref_name }}_${{ matrix.os }}.zip dist/
      
      - name: Zip folder on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          $itemsToZip = @(".\dist\${{ matrix.os }}_cmd-release", ".\dist\${{ matrix.os }}_cli-release")
          Compress-Archive -Path $itemsToZip -DestinationPath ".\dist\translator@${{ github.ref_name }}_${{ matrix.os }}.zip"
          if (Test-Path ".\dist\translator@${{ github.ref_name }}_${{ matrix.os }}.zip") { 
            foreach ($item in $itemsToZip) {
              Remove-Item -Path $item -Recurse -Force
            }
            Write-Output "Files zipped and originals deleted successfully."
            exit 0
          } else {
            Write-Output "Failed to create zip file. Source files were not deleted."
            exit 1
          }

      - name: Upload debug builds
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_builds
          path: build/*

      - name: Upload distributable builds
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_dists
          path: dist/*

  normal_release:
    name: Draft normal release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          pattern: "*_dists"

      - name: List release-artifacts directory # debug
        run: ls -R release-artifacts

      - name: Draft normal release
        uses: ncipollo/release-action@v1.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          tag: ${{ github.ref_name }}
          artifacts: release-artifacts/*_dists/translator@*
          draft: true
          name: "Release ${{ github.ref_name }}"
          body: "If you're using the CLI, we recommend renaming the artifact to something shorter, like 'translator-CLI'."